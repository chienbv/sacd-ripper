#summary The Scarlet Book is Philips and Sony's 1999 specification document for Super Audio Compact Disc ( SACD ).

= Introduction =

The Scarlet Book is Philips and Sony's 1999 specification document for Super Audio Compact Disc ( SACD ), a high-resolution audio format that features complex six-channel sound. SACD discs can contain three different versions of the same material.

= Specification =

Numbers are stored in big endian format.

== Block Addressing (LSN) ==

A Scarlet Book disk is broken up into a number of 2048-byte blocks which we call frames. The way Scarlet Book addresses a block is to use its LSN or "logical sector number." Scarlet Book numbers the blocks from 0 on.

== Master Area ==

{{{

// Example of a Scarlet Book SACD:
//
//                  Start LSN    Size     Comment
//                  -----------  -------  ---------------------------------------------
// File System      0            510      Only some SACD's have UDF data, so ignore..
// Master TOC-1     510          10
// Master TOC-2     520          10
// Master TOC-3     530          10
// 2 Channel
//   Area TOC-1     -            40       master_area_t.2ch_toc1_area_start
//   Track Area     -            -
//   Area TOC-2     -            40       master_area_t.2ch_toc2_area_start
// Multi Channel
//   Area TOC-1     -            40       master_area_t.mch_toc1_area_start
//   Track Area     -            -
//   Area TOC-2     -            40       master_area_t.mch_toc2_area_start
// Padding          -            -
// 
//

#define START_OF_FILE_SYSTEM_AREA   0
#define START_OF_MASTER_TOC         510
#define SACD_RAW_FRAME_SIZE         2048
#define MAX_AREA_TOC_SIZE_LSN       96
#define SAMPLES_PER_FRAME           588

#define DST_ENCODED                 0
#define DSD_3_IN_14_ENCODED         2
#define DSD_3_IN_16_ENCODED         3

enum 
{
    CHAR_SET_UNKNOWN          = 0
  , CHAR_SET_ISO646           = 1 
  , CHAR_SET_ISO8859_1        = 2 
  , CHAR_SET_RIS506           = 3 
  , CHAR_SET_KSC5601          = 4 
  , CHAR_SET_GB2312           = 5 
  , CHAR_SET_BIG5             = 6 
  , CHAR_SET_ISO8859_1_ESC    = 7 

} character_set_t;

static const char *genre[] =
{
    "Not used"
  , "Not defined"
  , "Adult Contemporary"
  , "Alternative Rock"
  , "Children's Music"
  , "Classical"
  , "Contemporary Christian"
  , "Country"
  , "Dance"
  , "Easy Listening"
  , "Erotic"
  , "Folk"
  , "Gospel"
  , "Hip Hop"
  , "Jazz"
  , "Latin"
  , "Musical"
  , "New Age"
  , "Opera"
  , "Operetta"
  , "Pop Music"
  , "RAP"
  , "Reggae"
  , "Rock Music"
  , "Rhythm & Blues"
  , "Sound Effects"
  , "Sound Track"
  , "Spoken Word"
  , "World Music"
  , "Blues"
  , 0
}

enum 
{
    GENRE_NOT_USED                      = 0
  , GENRE_NOT_DEFINED                   = 1
  , GENRE_ADULT_CONTEMPORARY            = 2
  , GENRE_ALTERNATIVE_ROCK              = 3
  , GENRE_CHILDRENS_MUSIC               = 4
  , GENRE_CLASSICAL                     = 5
  , GENRE_CONTEMPORARY_CHRISTIAN        = 6
  , GENRE_COUNTRY                       = 7
  , GENRE_DANCE                         = 8
  , GENRE_EASY_LISTENING                = 9
  , GENRE_EROTIC                        = 10
  , GENRE_FOLK                          = 11
  , GENRE_GOSPEL                        = 12
  , GENRE_HIP_HOP                       = 13
  , GENRE_JAZZ                          = 14
  , GENRE_LATIN                         = 15
  , GENRE_MUSICAL                       = 16
  , GENRE_NEW_AGE                       = 17
  , GENRE_OPERA                         = 18
  , GENRE_OPERETTA                      = 19
  , GENRE_POP_MUSIC                     = 20
  , GENRE_RAP                           = 21
  , GENRE_REGGAE                        = 22
  , GENRE_ROCK_MUSIC                    = 23
  , GENRE_RHYTHM_AND_BLUES              = 24
  , GENRE_SOUND_EFFECTS                 = 25
  , GENRE_SOUND_TRACK                   = 26
  , GENRE_SPOKEN_WORD                   = 27
  , GENRE_WORLD_MUSIC                   = 28
  , GENRE_BLUES                         = 29
  
} genre_t;

enum
{
    CATEGORY_NOT_USED                   = 0
  , CATEGORY_GENERAL                    = 1
  , CATEGORY_JAPANESE                   = 2

} category_t;

}}}

=== Master Area TOC ===

{{{
typedef struct
{
  uint8_t        category;                  // category_t
  uint16_t       padding;
  uint8_t        genre;                     // genre_t
} genre_table_t;

typedef struct
  uint16_t       language;                  // ISO639-2 Language code
  uint8_t        character_set;             // char_set_t
  uint8_t        padding;
} lang_table_t;

typedef struct
{ 
  uint64_t       id;                        // SACDMTOC
  uint16_t       disc_version;              // 1.20 / 0x0114
  uint8_t        unknown_01[6];
  uint16_t       album_set_size;
  uint16_t       album_sequence_number;
  uint8_t        unknown_02[4];
  char           album_catalog_number[16];  // 0x00 when empty, else padded with spaces for short strings
  genre_table_t  album_genre[4];
  uint8_t        unknown_03[10];
  uint32_t       2ch_toc1_area_start;
  uint32_t       2ch_toc2_area_start;
  uint32_t       mch_toc1_area_start;
  uint32_t       mch_toc2_area_start;
  uint8_t        disc_type;                 // 0x80 hybrid, 0x00 for single, 0x?? for dual?
  uint8_t        unknown_04[3];             // padding?
  uint16_t       2ch_toc_area_size;
  uint16_t       mch_toc_area_size;
  char           disc_catalog_number[16];   // 0x00 when empty, else padded with spaces for short strings
  genre_table_t  disc_genre[4];
  uint16_t       disc_date_year;
  uint8_t        disc_date_month;
  uint8_t        disc_date_day;
  uint8_t        unknown_05[4];             // time?
  uint8_t        text_channel_count;
  uint8_t        unknown_06[7];
  lang_table_t   languages[8];
  uint8_t        unknown_07[1880];
} master_toc_t;

typedef struct
{
  uint64_t       id;                        // SACDText
  uint64_t       unknown_01;

} master_text_t;

typedef struct
{
  uint64_t       id;                        // SACD_Man
 
} master_man_t;



}}}